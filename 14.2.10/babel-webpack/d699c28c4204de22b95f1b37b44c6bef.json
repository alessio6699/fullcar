{"ast":null,"code":"import * as i8 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Self, Attribute, Input, ViewChild, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n  }\n}\n\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 12);\n    i0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"div\", 15, 16);\n    i0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_10_Template_div_animation_transformPanel_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8._panelDoneAnimatingStream.next($event.toState));\n    })(\"keydown\", function MatSelect_ng_template_10_Template_div_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10._handleKeydown($event));\n    });\n    i0.ɵɵprojection(2, 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open \", ctx_r4._getPanelTheme(), \"\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", \"showing\");\n    i0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n  }\n}\n\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [transition('* => void', query('@transformPanel', [animateChild()], {\n    optional: true\n  }))]),\n\n  /** This animation transforms the select's overlay panel on and off the page. */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    opacity: 0,\n    transform: 'scale(1, 0.8)'\n  })), transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 1,\n    transform: 'scale(1, 1)'\n  }))), transition('* => void', animate('100ms linear', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\n\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\n\n\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\n\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\n\nclass MatSelectChange {\n  constructor(\n  /** Reference to the select that emitted the change event. */\n  source,\n  /** Current value of the select that emitted the event. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n\n} // Boilerplate for applying mixins to MatSelect.\n\n/** @docs-private */\n\n\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n  constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /**\n   * Form control bound to the component.\n   * Implemented as part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  ngControl) {\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n    /**\n     * Emits whenever the component state changes and should cause the parent\n     * form-field to update. Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n\n    this.stateChanges = new Subject();\n  }\n\n}))));\n/** Base class with all of the `MatSelect` functionality. */\n\n\nclass _MatSelectBase extends _MatSelectMixinBase {\n  /** Whether the select is focused. */\n  get focused() {\n    return this._focused || this._panelOpen;\n  }\n  /** Placeholder to be shown if no value has been selected. */\n\n\n  get placeholder() {\n    return this._placeholder;\n  }\n\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /** Whether the component is required. */\n\n\n  get required() {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /** Whether the user should be allowed to select multiple options. */\n\n\n  get multiple() {\n    return this._multiple;\n  }\n\n  set multiple(value) {\n    if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n  /** Whether to center the active option over the trigger. */\n\n\n  get disableOptionCentering() {\n    return this._disableOptionCentering;\n  }\n\n  set disableOptionCentering(value) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n\n\n  get compareWith() {\n    return this._compareWith;\n  }\n\n  set compareWith(fn) {\n    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectNonFunctionValueError();\n    }\n\n    this._compareWith = fn;\n\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /** Value of the select control. */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(newValue) {\n    const hasAssigned = this._assignValue(newValue);\n\n    if (hasAssigned) {\n      this._onChange(newValue);\n    }\n  }\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n\n\n  get typeaheadDebounceInterval() {\n    return this._typeaheadDebounceInterval;\n  }\n\n  set typeaheadDebounceInterval(value) {\n    this._typeaheadDebounceInterval = coerceNumberProperty(value);\n  }\n  /** Unique id of the element. */\n\n\n  get id() {\n    return this._id;\n  }\n\n  set id(value) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n\n  constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._viewportRuler = _viewportRuler;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._ngZone = _ngZone;\n    this._dir = _dir;\n    this._parentFormField = _parentFormField;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._defaultOptions = _defaultOptions;\n    /** Whether or not the overlay panel is open. */\n\n    this._panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n\n    this._compareWith = (o1, o2) => o1 === o2;\n    /** Unique id for this input. */\n\n\n    this._uid = `mat-select-${nextUniqueId++}`;\n    /** Current `aria-labelledby` value for the select trigger. */\n\n    this._triggerAriaLabelledBy = null;\n    /** Emits whenever the component is destroyed. */\n\n    this._destroy = new Subject();\n    /** `View -> model callback called when value changes` */\n\n    this._onChange = () => {};\n    /** `View -> model callback called when select has been touched` */\n\n\n    this._onTouched = () => {};\n    /** ID for the DOM node containing the select's value. */\n\n\n    this._valueId = `mat-select-value-${nextUniqueId++}`;\n    /** Emits when the panel element is finished transforming in. */\n\n    this._panelDoneAnimatingStream = new Subject();\n    this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n    this._focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n\n    this.controlType = 'mat-select';\n    this._multiple = false;\n    this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n    /** Aria label of the select. */\n\n    this.ariaLabel = '';\n    /** Combined stream of all of the child options' change events. */\n\n    this.optionSelectionChanges = defer(() => {\n      const options = this.options;\n\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n      }\n\n      return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n    /** Event emitted when the select panel has been toggled. */\n\n    this.openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n\n    this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n    /** Event emitted when the select has been closed. */\n\n    this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n    /** Event emitted when the selected value has been changed by the user. */\n\n    this.selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n\n    this.valueChange = new EventEmitter();\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    } // Note that we only want to set this when the defaults pass it in, otherwise it should\n    // stay as `undefined` so that it falls back to the default in the key manager.\n\n\n    if (_defaultOptions?.typeaheadDebounceInterval != null) {\n      this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple);\n    this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n\n    this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(() => this._panelDoneAnimating(this.panelOpen));\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    const newAriaLabelledby = this._getTriggerAriaLabelledby();\n\n    const ngControl = this.ngControl; // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n    // is computed as a result of a content query which can cause this binding to trigger a\n    // \"changed after checked\" error.\n\n    if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n      const element = this._elementRef.nativeElement;\n      this._triggerAriaLabelledBy = newAriaLabelledby;\n\n      if (newAriaLabelledby) {\n        element.setAttribute('aria-labelledby', newAriaLabelledby);\n      } else {\n        element.removeAttribute('aria-labelledby');\n      }\n    }\n\n    if (ngControl) {\n      // The disabled state might go out of sync if the form group is swapped out. See #17860.\n      if (this._previousControl !== ngControl.control) {\n        if (this._previousControl !== undefined && ngControl.disabled !== null && ngControl.disabled !== this.disabled) {\n          this.disabled = ngControl.disabled;\n        }\n\n        this._previousControl = ngControl.control;\n      }\n\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled'] || changes['userAriaDescribedBy']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n\n    this._destroy.next();\n\n    this._destroy.complete();\n\n    this.stateChanges.complete();\n  }\n  /** Toggles the overlay panel open or closed. */\n\n\n  toggle() {\n    this.panelOpen ? this.close() : this.open();\n  }\n  /** Opens the overlay panel. */\n\n\n  open() {\n    if (this._canOpen()) {\n      this._panelOpen = true;\n\n      this._keyManager.withHorizontalOrientation(null);\n\n      this._highlightCorrectOption();\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Closes the overlay panel and focuses the host element. */\n\n\n  close() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._changeDetectorRef.markForCheck();\n\n      this._onTouched();\n    }\n  }\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n\n\n  writeValue(value) {\n    this._assignValue(value);\n  }\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n\n    this._changeDetectorRef.markForCheck();\n\n    this.stateChanges.next();\n  }\n  /** Whether or not the overlay panel is open. */\n\n\n  get panelOpen() {\n    return this._panelOpen;\n  }\n  /** The currently selected option. */\n\n\n  get selected() {\n    return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n  }\n  /** The value displayed in the trigger. */\n\n\n  get triggerValue() {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n  /** Whether the element is in RTL mode. */\n\n\n  _isRtl() {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n  /** Handles all keydown events on the select. */\n\n\n  _handleKeydown(event) {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n  /** Handles keyboard events while the select is closed. */\n\n\n  _handleClosedKeydown(event) {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>\n\n    if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n      manager.onKeydown(event);\n      const selectedOption = this.selected; // Since the value has changed, we need to announce it ourselves.\n\n      if (selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n      }\n    }\n  }\n  /** Handles keyboard events when the selected is open. */\n\n\n  _handleOpenKeydown(event) {\n    const manager = this._keyManager;\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isTyping = manager.isTyping();\n\n    if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close(); // Don't do anything in this case if the user is typing,\n      // because the typing sequence can include the space key.\n    } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n      event.preventDefault();\n\n      manager.activeItem._selectViaInteraction();\n    } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n\n\n  _onBlur() {\n    this._focused = false;\n    this._keyManager?.cancelTypeahead();\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n\n\n  _onAttached() {\n    this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n\n      this._positioningSettled();\n    });\n  }\n  /** Returns the theme to be used on the panel. */\n\n\n  _getPanelTheme() {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n  /** Whether the select has a value. */\n\n\n  get empty() {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl) {\n        this._value = this.ngControl.value;\n      }\n\n      this._setSelectionByValue(this._value);\n\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n\n\n  _setSelectionByValue(value) {\n    this.options.forEach(option => option.setInactiveStyles());\n\n    this._selectionModel.clear();\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      value.forEach(currentValue => this._selectOptionByValue(currentValue));\n\n      this._sortValues();\n    } else {\n      const correspondingOption = this._selectOptionByValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n\n\n      if (correspondingOption) {\n        this._keyManager.updateActiveItem(correspondingOption);\n      } else if (!this.panelOpen) {\n        // Otherwise reset the highlighted option. Note that we only want to do this while\n        // closed, because doing it while open can shift the user's focus unnecessarily.\n        this._keyManager.updateActiveItem(-1);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n\n\n  _selectOptionByValue(value) {\n    const correspondingOption = this.options.find(option => {\n      // Skip options that are already in the model. This allows us to handle cases\n      // where the same primitive value is selected multiple times.\n      if (this._selectionModel.isSelected(option)) {\n        return false;\n      }\n\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value, value);\n      } catch (error) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n  /** Assigns a specific value to the select. Returns whether the value has changed. */\n\n\n  _assignValue(newValue) {\n    // Always re-assign an array, because it might have been mutated.\n    if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n      if (this.options) {\n        this._setSelectionByValue(newValue);\n      }\n\n      this._value = newValue;\n      return true;\n    }\n\n    return false;\n  }\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n\n\n  _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withPageUpDown().withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.subscribe(() => {\n      if (this.panelOpen) {\n        // Select the active item when tabbing away. This is consistent with how the native\n        // select behaves. Note that we only want to do this in single selection mode.\n        if (!this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        } // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n\n\n        this.focus();\n        this.close();\n      }\n    });\n\n    this._keyManager.change.subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n\n\n  _resetOptions() {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    }); // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n\n    merge(...this.options.map(option => option._stateChanges)).pipe(takeUntil(changedOrDestroyed)).subscribe(() => {\n      // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n      // be the result of an expression changing. We have to use `detectChanges` in order\n      // to avoid \"changed after checked\" errors (see #14793).\n      this._changeDetectorRef.detectChanges();\n\n      this.stateChanges.next();\n    });\n  }\n  /** Invoked when an option is clicked. */\n\n\n  _onSelect(option, isUserInput) {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n\n      this._selectionModel.clear();\n\n      if (this.value != null) {\n        this._propagateChanges(option.value);\n      }\n    } else {\n      if (wasSelected !== option.selected) {\n        option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n      }\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n  /** Sorts the selected values in the selected based on their order in the panel. */\n\n\n  _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n      });\n\n      this.stateChanges.next();\n    }\n  }\n  /** Emits change event to set the model value. */\n\n\n  _propagateChanges(fallbackValue) {\n    let valueToEmit = null;\n\n    if (this.multiple) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n\n    this._onChange(valueToEmit);\n\n    this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n\n\n  _highlightCorrectOption() {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n  /** Whether the panel is allowed to open. */\n\n\n  _canOpen() {\n    return !this._panelOpen && !this.disabled && this.options?.length > 0;\n  }\n  /** Focuses the select element. */\n\n\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  }\n  /** Gets the aria-labelledby for the select panel. */\n\n\n  _getPanelAriaLabelledby() {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = this._parentFormField?.getLabelId();\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Determines the `aria-activedescendant` to be set on the host. */\n\n\n  _getAriaActiveDescendant() {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n  /** Gets the aria-labelledby of the select component trigger. */\n\n\n  _getTriggerAriaLabelledby() {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = this._parentFormField?.getLabelId();\n    let value = (labelId ? labelId + ' ' : '') + this._valueId;\n\n    if (this.ariaLabelledby) {\n      value += ' ' + this.ariaLabelledby;\n    }\n\n    return value;\n  }\n  /** Called when the overlay panel is done animating. */\n\n\n  _panelDoneAnimating(isOpen) {\n    this.openedChange.emit(isOpen);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  setDescribedByIds(ids) {\n    if (ids.length) {\n      this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      this._elementRef.nativeElement.removeAttribute('aria-describedby');\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get shouldLabelFloat() {\n    return this._panelOpen || !this.empty || this._focused && !!this._placeholder;\n  }\n\n}\n\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) {\n  return new (t || _MatSelectBase)(i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.ErrorStateMatcher), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(i4.NgForm, 8), i0.ɵɵdirectiveInject(i4.FormGroupDirective, 8), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), i0.ɵɵdirectiveInject(i4.NgControl, 10), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i5.LiveAnnouncer), i0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8));\n};\n\n_MatSelectBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatSelectBase,\n  viewQuery: function _MatSelectBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n    }\n  },\n  inputs: {\n    userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"],\n    panelClass: \"panelClass\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    multiple: \"multiple\",\n    disableOptionCentering: \"disableOptionCentering\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    errorStateMatcher: \"errorStateMatcher\",\n    typeaheadDebounceInterval: \"typeaheadDebounceInterval\",\n    sortComparator: \"sortComparator\",\n    id: \"id\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    _closedStream: \"closed\",\n    selectionChange: \"selectionChange\",\n    valueChange: \"valueChange\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatSelectBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i1.ViewportRuler\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.ErrorStateMatcher\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i6.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }, {\n      type: i4.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SELECT_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i5.LiveAnnouncer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SELECT_CONFIG]\n      }]\n    }];\n  }, {\n    userAriaDescribedBy: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    trigger: [{\n      type: ViewChild,\n      args: ['trigger']\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    _overlayDir: [{\n      type: ViewChild,\n      args: [CdkConnectedOverlay]\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disableOptionCentering: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    typeaheadDebounceInterval: [{\n      type: Input\n    }],\n    sortComparator: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\n\nclass MatSelectTrigger {}\n\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n  return new (t || MatSelectTrigger)();\n};\n\nMatSelectTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSelectTrigger,\n  selectors: [[\"mat-select-trigger\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_SELECT_TRIGGER,\n    useExisting: MatSelectTrigger\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectTrigger, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-select-trigger',\n      providers: [{\n        provide: MAT_SELECT_TRIGGER,\n        useExisting: MatSelectTrigger\n      }]\n    }]\n  }], null, null);\n})();\n\nclass MatSelect extends _MatSelectBase {\n  constructor() {\n    super(...arguments);\n    this._positions = [{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass: 'mat-mdc-select-panel-above'\n    }];\n  }\n\n  get shouldLabelFloat() {\n    // Since the panel doesn't overlap the trigger, we\n    // want the label to only float when there's a value.\n    return this.panelOpen || !this.empty || this.focused && !!this.placeholder;\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        this._overlayWidth = this._getOverlayWidth();\n\n        this._changeDetectorRef.detectChanges();\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n    // Note that it's important that we read this in `ngAfterViewInit`, because\n    // reading it earlier will cause the form field to return a different element.\n    if (this._parentFormField) {\n      this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n    }\n  }\n\n  open() {\n    this._overlayWidth = this._getOverlayWidth();\n    super.open(); // Required for the MDC form field to pick up when the overlay has been opened.\n\n    this.stateChanges.next();\n  }\n\n  close() {\n    super.close(); // Required for the MDC form field to pick up when the overlay has been closed.\n\n    this.stateChanges.next();\n  }\n  /** Scrolls the active option into view. */\n\n\n  _scrollOptionIntoView(index) {\n    const option = this.options.toArray()[index];\n\n    if (option) {\n      const panel = this.panel.nativeElement;\n\n      const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n\n      const element = option._getHostElement();\n\n      if (index === 0 && labelCount === 1) {\n        // If we've got one group label before the option and we're at the top option,\n        // scroll the list to the top. This is better UX than scrolling the list to the\n        // top of the option, because it allows the user to read the top group's label.\n        panel.scrollTop = 0;\n      } else {\n        panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n      }\n    }\n  }\n\n  _positioningSettled() {\n    this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n  }\n\n  _getChangeEvent(value) {\n    return new MatSelectChange(this, value);\n  }\n  /** Gets how wide the overlay panel should be. */\n\n\n  _getOverlayWidth() {\n    const refToMeasure = this._preferredOverlayOrigin instanceof CdkOverlayOrigin ? this._preferredOverlayOrigin.elementRef : this._preferredOverlayOrigin || this._elementRef;\n    return refToMeasure.nativeElement.getBoundingClientRect().width;\n  }\n\n}\n\nMatSelect.ɵfac = /* @__PURE__ */function () {\n  let ɵMatSelect_BaseFactory;\n  return function MatSelect_Factory(t) {\n    return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = i0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect);\n  };\n}();\n\nMatSelect.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSelect,\n  selectors: [[\"mat-select\"]],\n  contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"listbox\", 1, \"mat-mdc-select\"],\n  hostVars: 19,\n  hostBindings: function MatSelect_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n      i0.ɵɵclassProp(\"mat-mdc-select-disabled\", ctx.disabled)(\"mat-mdc-select-invalid\", ctx.errorState)(\"mat-mdc-select-required\", ctx.required)(\"mat-mdc-select-empty\", ctx.empty)(\"mat-mdc-select-multiple\", ctx.multiple);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matSelect\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatSelect\n  }, {\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatSelect\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c3,\n  decls: 11,\n  vars: 11,\n  consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-mdc-select-trigger\", 3, \"click\"], [\"fallbackOverlayOrigin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-mdc-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-mdc-select-placeholder mat-mdc-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-mdc-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-mdc-select-arrow-wrapper\"], [1, \"mat-mdc-select-arrow\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"focusable\", \"false\"], [\"d\", \"M7 10l5 5 5-5z\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayWidth\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-mdc-select-placeholder\", \"mat-mdc-select-min-line\"], [1, \"mat-mdc-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-mdc-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-mdc-select-min-line\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n  template: function MatSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n        return ctx.toggle();\n      });\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n      i0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"div\", 6);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(8, \"svg\", 7);\n      i0.ɵɵelement(9, \"path\", 8);\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵtemplate(10, MatSelect_ng_template_10_Template, 3, 9, \"ng-template\", 9);\n      i0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_10_listener() {\n        return ctx.close();\n      })(\"attach\", function MatSelect_Template_ng_template_attach_10_listener() {\n        return ctx._onAttached();\n      })(\"detach\", function MatSelect_Template_ng_template_detach_10_listener() {\n        return ctx.close();\n      });\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n\n      i0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n      i0.ɵɵattribute(\"id\", ctx._valueId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", true);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", false);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", ctx._preferredOverlayOrigin || _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayWidth\", ctx._overlayWidth);\n    }\n  },\n  dependencies: [i7.NgClass, i7.NgSwitch, i7.NgSwitchCase, i7.NgSwitchDefault, i8.CdkConnectedOverlay, i8.CdkOverlayOrigin],\n  styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height, calc(100vh - 32px));margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;z-index:8;border-radius:4px;border-radius:var(--mdc-shape-medium, 4px);transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.mat-mdc-select{display:inline-block;width:100%;outline:none}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}.mdc-menu-surface.mat-mdc-select-panel{width:100%;max-height:275px;position:static;outline:0;margin:0;padding:8px 0;list-style-type:none}.mdc-menu-surface.mat-mdc-select-panel:focus{outline:none}.cdk-high-contrast-active .mdc-menu-surface.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) .mdc-menu-surface.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above .mdc-menu-surface.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSelectAnimations.transformPanel]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelect, [{\n    type: Component,\n    args: [{\n      selector: 'mat-select',\n      exportAs: 'matSelect',\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'combobox',\n        'aria-autocomplete': 'none',\n        'aria-haspopup': 'listbox',\n        'class': 'mat-mdc-select',\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n        '[attr.aria-expanded]': 'panelOpen',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[class.mat-mdc-select-disabled]': 'disabled',\n        '[class.mat-mdc-select-invalid]': 'errorState',\n        '[class.mat-mdc-select-required]': 'required',\n        '[class.mat-mdc-select-empty]': 'empty',\n        '[class.mat-mdc-select-multiple]': 'multiple',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()'\n      },\n      animations: [matSelectAnimations.transformPanel],\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatSelect\n      }, {\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatSelect\n      }],\n      template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height, calc(100vh - 32px));margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;z-index:8;border-radius:4px;border-radius:var(--mdc-shape-medium, 4px);transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.mat-mdc-select{display:inline-block;width:100%;outline:none}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}.mdc-menu-surface.mat-mdc-select-panel{width:100%;max-height:275px;position:static;outline:0;margin:0;padding:8px 0;list-style-type:none}.mdc-menu-surface.mat-mdc-select-panel:focus{outline:none}.cdk-high-contrast-active .mdc-menu-surface.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) .mdc-menu-surface.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above .mdc-menu-surface.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"]\n    }]\n  }], null, {\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MAT_SELECT_TRIGGER]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatSelectModule {}\n\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n  return new (t || MatSelectModule)();\n};\n\nMatSelectModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatSelectModule\n});\nMatSelectModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n  imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n      exports: [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n      declarations: [MatSelect, MatSelectTrigger],\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };","map":{"version":3,"names":["i8","Overlay","CdkConnectedOverlay","CdkOverlayOrigin","OverlayModule","i7","CommonModule","i0","InjectionToken","EventEmitter","Directive","Optional","Inject","Self","Attribute","Input","ViewChild","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","i2","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","i6","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","i1","CdkScrollableModule","i5","ActiveDescendantKeyManager","i3","coerceBooleanProperty","coerceNumberProperty","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","i4","Validators","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","matSelectAnimations","transformPanelWrap","optional","transformPanel","opacity","transform","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_SELECT_TRIGGER","MatSelectChange","constructor","source","value","_MatSelectMixinBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","_MatSelectBase","focused","_focused","_panelOpen","placeholder","_placeholder","next","required","_required","control","hasValidator","multiple","_multiple","_selectionModel","ngDevMode","disableOptionCentering","_disableOptionCentering","compareWith","_compareWith","fn","_initializeSelection","_value","newValue","hasAssigned","_assignValue","_onChange","typeaheadDebounceInterval","_typeaheadDebounceInterval","id","_id","_uid","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","o1","o2","_triggerAriaLabelledBy","_destroy","_onTouched","_valueId","_panelDoneAnimatingStream","_overlayPanelClass","overlayPanelClass","controlType","ariaLabel","optionSelectionChanges","options","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","ngOnInit","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","_previousControl","undefined","disabled","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","ngOnDestroy","destroy","complete","toggle","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","triggerValue","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","cancelTypeahead","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","_getPanelTheme","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","_getPanelAriaLabelledby","labelId","getLabelId","labelExpression","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","ɵfac","ViewportRuler","ChangeDetectorRef","NgZone","ErrorStateMatcher","ElementRef","Directionality","NgForm","FormGroupDirective","NgControl","LiveAnnouncer","ɵdir","type","decorators","MatFormField","args","userAriaDescribedBy","panelClass","errorStateMatcher","MatSelectTrigger","useExisting","selector","providers","MatSelect","arguments","_positions","originX","originY","overlayX","overlayY","_overlayWidth","_getOverlayWidth","ngAfterViewInit","_preferredOverlayOrigin","getConnectedOverlayOrigin","index","labelCount","optionGroups","_getHostElement","scrollTop","offsetTop","offsetHeight","refToMeasure","getBoundingClientRect","width","ɵcmp","NgClass","NgSwitch","NgSwitchCase","NgSwitchDefault","exportAs","inputs","encapsulation","None","changeDetection","OnPush","host","animations","template","styles","descendants","customTrigger","MatSelectModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["/Users/alessio/sviluppo/progettoFullCAr/full/fullCar/node_modules/@angular/material/fesm2020/select.mjs"],"sourcesContent":["import * as i8 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Self, Attribute, Input, ViewChild, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n}))));\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `aria-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSelectBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.0\", type: _MatSelectBase, inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i6.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }]; }, propDecorators: { userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.1.0\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n        ];\n    }\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth();\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterViewInit() {\n        // Note that it's important that we read this in `ngAfterViewInit`, because\n        // reading it earlier will cause the form field to return a different element.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n    }\n    open() {\n        this._overlayWidth = this._getOverlayWidth();\n        super.open();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    close() {\n        super.close();\n        // Required for the MDC form field to pick up when the overlay has been closed.\n        this.stateChanges.next();\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth() {\n        const refToMeasure = this._preferredOverlayOrigin instanceof CdkOverlayOrigin\n            ? this._preferredOverlayOrigin.elementRef\n            : this._preferredOverlayOrigin || this._elementRef;\n        return refToMeasure.nativeElement.getBoundingClientRect().width;\n    }\n}\nMatSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.1.0\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"listbox\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n        { provide: MatFormFieldControl, useExisting: MatSelect },\n        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n    ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height, calc(100vh - 32px));margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;z-index:8;border-radius:4px;border-radius:var(--mdc-shape-medium, 4px);transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.mat-mdc-select{display:inline-block;width:100%;outline:none}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}.mdc-menu-surface.mat-mdc-select-panel{width:100%;max-height:275px;position:static;outline:0;margin:0;padding:8px 0;list-style-type:none}.mdc-menu-surface.mat-mdc-select-panel:focus{outline:none}.cdk-high-contrast-active .mdc-menu-surface.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) .mdc-menu-surface.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above .mdc-menu-surface.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"], dependencies: [{ kind: \"directive\", type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i7.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i7.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i7.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { kind: \"directive\", type: i8.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: i8.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height, calc(100vh - 32px));margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;z-index:8;border-radius:4px;border-radius:var(--mdc-shape-medium, 4px);transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.mat-mdc-select{display:inline-block;width:100%;outline:none}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}.mdc-menu-surface.mat-mdc-select-panel{width:100%;max-height:275px;position:static;outline:0;margin:0;padding:8px 0;list-style-type:none}.mdc-menu-surface.mat-mdc-select-panel:focus{outline:none}.cdk-high-contrast-active .mdc-menu-surface.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) .mdc-menu-surface.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above .mdc-menu-surface.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.1.0\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n        MatFormFieldModule,\n        MatSelect,\n        MatSelectTrigger,\n        MatOptionModule,\n        MatCommonModule] });\nMatSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.1.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}